{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst oss_json_1 = __importDefault(require(\"../../fixtures/regexes/oss.json\"));\n\nconst version_1 = require(\"../../utils/version\");\n\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\n\nconst user_agent_1 = require(\"../../utils/user-agent\");\n\nconst desktopOsArray = [\"AmigaOS\", \"IBM\", \"GNU/Linux\", \"Mac\", \"Unix\", \"Windows\", \"BeOS\", \"Chrome OS\"];\nconst shortOsNames = {\n  \"AIX\": \"AIX\",\n  \"AND\": \"Android\",\n  \"AMG\": \"AmigaOS\",\n  \"ATV\": \"Apple TV\",\n  \"ARL\": \"Arch Linux\",\n  \"BTR\": \"BackTrack\",\n  \"SBA\": \"Bada\",\n  \"BEO\": \"BeOS\",\n  \"BLB\": \"BlackBerry OS\",\n  \"QNX\": \"BlackBerry Tablet OS\",\n  \"BMP\": \"Brew\",\n  \"CES\": \"CentOS\",\n  \"COS\": \"Chrome OS\",\n  \"CYN\": \"CyanogenMod\",\n  \"DEB\": \"Debian\",\n  \"DFB\": \"DragonFly\",\n  \"FED\": \"Fedora\",\n  \"FOS\": \"Firefox OS\",\n  \"FIR\": \"Fire OS\",\n  \"BSD\": \"FreeBSD\",\n  \"GNT\": \"Gentoo\",\n  \"GTV\": \"Google TV\",\n  \"HPX\": \"HP-UX\",\n  \"HAI\": \"Haiku OS\",\n  \"IRI\": \"IRIX\",\n  \"INF\": \"Inferno\",\n  \"KOS\": \"KaiOS\",\n  \"KNO\": \"Knoppix\",\n  \"KBT\": \"Kubuntu\",\n  \"LIN\": \"GNU\\/Linux\",\n  \"LBT\": \"Lubuntu\",\n  \"VLN\": \"VectorLinux\",\n  \"MAC\": \"Mac\",\n  \"MAE\": \"Maemo\",\n  \"MDR\": \"Mandriva\",\n  \"SMG\": \"MeeGo\",\n  \"MCD\": \"MocorDroid\",\n  \"MIN\": \"Mint\",\n  \"MLD\": \"MildWild\",\n  \"MOR\": \"MorphOS\",\n  \"NBS\": \"NetBSD\",\n  \"MTK\": \"MTK \\/ Nucleus\",\n  \"WII\": \"Nintendo\",\n  \"NDS\": \"Nintendo Mobile\",\n  \"OS2\": \"OS\\/2\",\n  \"T64\": \"OSF1\",\n  \"OBS\": \"OpenBSD\",\n  \"ORD\": \"Ordissimo\",\n  \"PSP\": \"PlayStation Portable\",\n  \"PS3\": \"PlayStation\",\n  \"RHT\": \"Red Hat\",\n  \"ROS\": \"RISC OS\",\n  \"REM\": \"Remix OS\",\n  \"RZD\": \"RazoDroiD\",\n  \"SAB\": \"Sabayon\",\n  \"SSE\": \"SUSE\",\n  \"SAF\": \"Sailfish OS\",\n  \"SLW\": \"Slackware\",\n  \"SOS\": \"Solaris\",\n  \"SYL\": \"Syllable\",\n  \"SYM\": \"Symbian\",\n  \"SYS\": \"Symbian OS\",\n  \"S40\": \"Symbian OS Series 40\",\n  \"S60\": \"Symbian OS Series 60\",\n  \"SY3\": \"Symbian^3\",\n  \"TDX\": \"ThreadX\",\n  \"TIZ\": \"Tizen\",\n  \"UBT\": \"Ubuntu\",\n  \"WTV\": \"WebTV\",\n  \"WIN\": \"Windows\",\n  \"WCE\": \"Windows CE\",\n  \"WIO\": \"Windows IoT\",\n  \"WMO\": \"Windows Mobile\",\n  \"WPH\": \"Windows Phone\",\n  \"WRT\": \"Windows RT\",\n  \"XBX\": \"Xbox\",\n  \"XBT\": \"Xubuntu\",\n  \"YNS\": \"YunOs\",\n  \"IOS\": \"iOS\",\n  \"POS\": \"palmOS\",\n  \"WOS\": \"webOS\"\n};\nconst osFamilies = {\n  \"Android\": [\"AND\", \"CYN\", \"FIR\", \"REM\", \"RZD\", \"MLD\", \"MCD\", \"YNS\"],\n  \"AmigaOS\": [\"AMG\", \"MOR\"],\n  \"Apple TV\": [\"ATV\"],\n  \"BlackBerry\": [\"BLB\", \"QNX\"],\n  \"Brew\": [\"BMP\"],\n  \"BeOS\": [\"BEO\", \"HAI\"],\n  \"Chrome OS\": [\"COS\"],\n  \"Firefox OS\": [\"FOS\", \"KOS\"],\n  \"Gaming Console\": [\"WII\", \"PS3\"],\n  \"Google TV\": [\"GTV\"],\n  \"IBM\": [\"OS2\"],\n  \"iOS\": [\"IOS\"],\n  \"RISC OS\": [\"ROS\"],\n  \"GNU\\/Linux\": [\"LIN\", \"ARL\", \"DEB\", \"KNO\", \"MIN\", \"UBT\", \"KBT\", \"XBT\", \"LBT\", \"FED\", \"RHT\", \"VLN\", \"MDR\", \"GNT\", \"SAB\", \"SLW\", \"SSE\", \"CES\", \"BTR\", \"SAF\", \"ORD\"],\n  \"Mac\": [\"MAC\"],\n  \"Mobile Gaming Console\": [\"PSP\", \"NDS\", \"XBX\"],\n  \"Real-time OS\": [\"MTK\", \"TDX\"],\n  \"Other Mobile\": [\"WOS\", \"POS\", \"SBA\", \"TIZ\", \"SMG\", \"MAE\"],\n  \"Symbian\": [\"SYM\", \"SYS\", \"SY3\", \"S60\", \"S40\"],\n  \"Unix\": [\"SOS\", \"AIX\", \"HPX\", \"BSD\", \"NBS\", \"OBS\", \"DFB\", \"SYL\", \"IRI\", \"T64\", \"INF\"],\n  \"WebTV\": [\"WTV\"],\n  \"Windows\": [\"WIN\"],\n  \"Windows Mobile\": [\"WPH\", \"WMO\", \"WCE\", \"WRT\", \"WIO\"]\n};\n\nclass OperatingSystemParser {\n  constructor(options) {\n    this.options = {\n      versionTruncation: 1\n    };\n\n    this.parse = userAgent => {\n      const result = {\n        name: \"\",\n        version: \"\",\n        platform: this.parsePlatform(userAgent)\n      };\n\n      for (const operatingSystem of oss_json_1.default) {\n        const match = user_agent_1.userAgentParser(operatingSystem.regex, userAgent);\n        if (!match) continue;\n        result.name = variable_replacement_1.variableReplacement(operatingSystem.name, match);\n        result.version = version_1.formatVersion(variable_replacement_1.variableReplacement(operatingSystem.version, match), this.options.versionTruncation);\n\n        if (result.name === \"lubuntu\") {\n          result.name = \"Lubuntu\";\n        }\n\n        if (result.name === \"debian\") {\n          result.name = \"Debian\";\n        }\n\n        if (result.name === \"YunOS\") {\n          result.name = \"YunOs\";\n        }\n\n        return result;\n      }\n\n      return null;\n    };\n\n    this.parsePlatform = userAgent => {\n      if (user_agent_1.userAgentParser(\"arm\", userAgent)) {\n        return \"ARM\";\n      }\n\n      if (user_agent_1.userAgentParser(\"WOW64|x64|win64|amd64|x86_64\", userAgent)) {\n        return \"x64\";\n      }\n\n      if (user_agent_1.userAgentParser(\"i[0-9]86|i86pc\", userAgent)) {\n        return \"x86\";\n      }\n\n      return \"\";\n    };\n\n    this.options = Object.assign(Object.assign({}, this.options), options);\n  }\n\n}\n\nexports.default = OperatingSystemParser;\n\nOperatingSystemParser.getDesktopOsArray = () => desktopOsArray;\n\nOperatingSystemParser.getOsFamily = osName => {\n  const osShortName = OperatingSystemParser.getOsShortName(osName);\n\n  for (const [osFamily, shortNames] of Object.entries(osFamilies)) {\n    if (shortNames.includes(osShortName)) {\n      return osFamily;\n    }\n  }\n\n  return \"\";\n};\n\nOperatingSystemParser.getOsShortName = osName => {\n  for (const [shortName, name] of Object.entries(shortOsNames)) {\n    if (name === osName) return shortName;\n  }\n\n  return \"\";\n};","map":{"version":3,"sources":["/home/command/evil-twin-rogue-ap/frontend/node_modules/device-detector-js/dist/parsers/operating-system/index.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","oss_json_1","require","version_1","variable_replacement_1","user_agent_1","desktopOsArray","shortOsNames","osFamilies","OperatingSystemParser","constructor","options","versionTruncation","parse","userAgent","result","name","version","platform","parsePlatform","operatingSystem","default","match","userAgentParser","regex","variableReplacement","formatVersion","assign","getDesktopOsArray","getOsFamily","osName","osShortName","getOsShortName","osFamily","shortNames","entries","includes","shortName"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst oss_json_1 = __importDefault(require(\"../../fixtures/regexes/oss.json\"));\nconst version_1 = require(\"../../utils/version\");\nconst variable_replacement_1 = require(\"../../utils/variable-replacement\");\nconst user_agent_1 = require(\"../../utils/user-agent\");\nconst desktopOsArray = [\"AmigaOS\", \"IBM\", \"GNU/Linux\", \"Mac\", \"Unix\", \"Windows\", \"BeOS\", \"Chrome OS\"];\nconst shortOsNames = { \"AIX\": \"AIX\", \"AND\": \"Android\", \"AMG\": \"AmigaOS\", \"ATV\": \"Apple TV\", \"ARL\": \"Arch Linux\", \"BTR\": \"BackTrack\", \"SBA\": \"Bada\", \"BEO\": \"BeOS\", \"BLB\": \"BlackBerry OS\", \"QNX\": \"BlackBerry Tablet OS\", \"BMP\": \"Brew\", \"CES\": \"CentOS\", \"COS\": \"Chrome OS\", \"CYN\": \"CyanogenMod\", \"DEB\": \"Debian\", \"DFB\": \"DragonFly\", \"FED\": \"Fedora\", \"FOS\": \"Firefox OS\", \"FIR\": \"Fire OS\", \"BSD\": \"FreeBSD\", \"GNT\": \"Gentoo\", \"GTV\": \"Google TV\", \"HPX\": \"HP-UX\", \"HAI\": \"Haiku OS\", \"IRI\": \"IRIX\", \"INF\": \"Inferno\", \"KOS\": \"KaiOS\", \"KNO\": \"Knoppix\", \"KBT\": \"Kubuntu\", \"LIN\": \"GNU\\/Linux\", \"LBT\": \"Lubuntu\", \"VLN\": \"VectorLinux\", \"MAC\": \"Mac\", \"MAE\": \"Maemo\", \"MDR\": \"Mandriva\", \"SMG\": \"MeeGo\", \"MCD\": \"MocorDroid\", \"MIN\": \"Mint\", \"MLD\": \"MildWild\", \"MOR\": \"MorphOS\", \"NBS\": \"NetBSD\", \"MTK\": \"MTK \\/ Nucleus\", \"WII\": \"Nintendo\", \"NDS\": \"Nintendo Mobile\", \"OS2\": \"OS\\/2\", \"T64\": \"OSF1\", \"OBS\": \"OpenBSD\", \"ORD\": \"Ordissimo\", \"PSP\": \"PlayStation Portable\", \"PS3\": \"PlayStation\", \"RHT\": \"Red Hat\", \"ROS\": \"RISC OS\", \"REM\": \"Remix OS\", \"RZD\": \"RazoDroiD\", \"SAB\": \"Sabayon\", \"SSE\": \"SUSE\", \"SAF\": \"Sailfish OS\", \"SLW\": \"Slackware\", \"SOS\": \"Solaris\", \"SYL\": \"Syllable\", \"SYM\": \"Symbian\", \"SYS\": \"Symbian OS\", \"S40\": \"Symbian OS Series 40\", \"S60\": \"Symbian OS Series 60\", \"SY3\": \"Symbian^3\", \"TDX\": \"ThreadX\", \"TIZ\": \"Tizen\", \"UBT\": \"Ubuntu\", \"WTV\": \"WebTV\", \"WIN\": \"Windows\", \"WCE\": \"Windows CE\", \"WIO\": \"Windows IoT\", \"WMO\": \"Windows Mobile\", \"WPH\": \"Windows Phone\", \"WRT\": \"Windows RT\", \"XBX\": \"Xbox\", \"XBT\": \"Xubuntu\", \"YNS\": \"YunOs\", \"IOS\": \"iOS\", \"POS\": \"palmOS\", \"WOS\": \"webOS\" };\nconst osFamilies = { \"Android\": [\"AND\", \"CYN\", \"FIR\", \"REM\", \"RZD\", \"MLD\", \"MCD\", \"YNS\"], \"AmigaOS\": [\"AMG\", \"MOR\"], \"Apple TV\": [\"ATV\"], \"BlackBerry\": [\"BLB\", \"QNX\"], \"Brew\": [\"BMP\"], \"BeOS\": [\"BEO\", \"HAI\"], \"Chrome OS\": [\"COS\"], \"Firefox OS\": [\"FOS\", \"KOS\"], \"Gaming Console\": [\"WII\", \"PS3\"], \"Google TV\": [\"GTV\"], \"IBM\": [\"OS2\"], \"iOS\": [\"IOS\"], \"RISC OS\": [\"ROS\"], \"GNU\\/Linux\": [\"LIN\", \"ARL\", \"DEB\", \"KNO\", \"MIN\", \"UBT\", \"KBT\", \"XBT\", \"LBT\", \"FED\", \"RHT\", \"VLN\", \"MDR\", \"GNT\", \"SAB\", \"SLW\", \"SSE\", \"CES\", \"BTR\", \"SAF\", \"ORD\"], \"Mac\": [\"MAC\"], \"Mobile Gaming Console\": [\"PSP\", \"NDS\", \"XBX\"], \"Real-time OS\": [\"MTK\", \"TDX\"], \"Other Mobile\": [\"WOS\", \"POS\", \"SBA\", \"TIZ\", \"SMG\", \"MAE\"], \"Symbian\": [\"SYM\", \"SYS\", \"SY3\", \"S60\", \"S40\"], \"Unix\": [\"SOS\", \"AIX\", \"HPX\", \"BSD\", \"NBS\", \"OBS\", \"DFB\", \"SYL\", \"IRI\", \"T64\", \"INF\"], \"WebTV\": [\"WTV\"], \"Windows\": [\"WIN\"], \"Windows Mobile\": [\"WPH\", \"WMO\", \"WCE\", \"WRT\", \"WIO\"] };\nclass OperatingSystemParser {\n    constructor(options) {\n        this.options = {\n            versionTruncation: 1\n        };\n        this.parse = (userAgent) => {\n            const result = {\n                name: \"\",\n                version: \"\",\n                platform: this.parsePlatform(userAgent)\n            };\n            for (const operatingSystem of oss_json_1.default) {\n                const match = user_agent_1.userAgentParser(operatingSystem.regex, userAgent);\n                if (!match)\n                    continue;\n                result.name = variable_replacement_1.variableReplacement(operatingSystem.name, match);\n                result.version = version_1.formatVersion(variable_replacement_1.variableReplacement(operatingSystem.version, match), this.options.versionTruncation);\n                if (result.name === \"lubuntu\") {\n                    result.name = \"Lubuntu\";\n                }\n                if (result.name === \"debian\") {\n                    result.name = \"Debian\";\n                }\n                if (result.name === \"YunOS\") {\n                    result.name = \"YunOs\";\n                }\n                return result;\n            }\n            return null;\n        };\n        this.parsePlatform = (userAgent) => {\n            if (user_agent_1.userAgentParser(\"arm\", userAgent)) {\n                return \"ARM\";\n            }\n            if (user_agent_1.userAgentParser(\"WOW64|x64|win64|amd64|x86_64\", userAgent)) {\n                return \"x64\";\n            }\n            if (user_agent_1.userAgentParser(\"i[0-9]86|i86pc\", userAgent)) {\n                return \"x86\";\n            }\n            return \"\";\n        };\n        this.options = Object.assign(Object.assign({}, this.options), options);\n    }\n}\nexports.default = OperatingSystemParser;\nOperatingSystemParser.getDesktopOsArray = () => desktopOsArray;\nOperatingSystemParser.getOsFamily = (osName) => {\n    const osShortName = OperatingSystemParser.getOsShortName(osName);\n    for (const [osFamily, shortNames] of Object.entries(osFamilies)) {\n        if (shortNames.includes(osShortName)) {\n            return osFamily;\n        }\n    }\n    return \"\";\n};\nOperatingSystemParser.getOsShortName = (osName) => {\n    for (const [shortName, name] of Object.entries(shortOsNames)) {\n        if (name === osName)\n            return shortName;\n    }\n    return \"\";\n};\n"]},"metadata":{},"sourceType":"script"}