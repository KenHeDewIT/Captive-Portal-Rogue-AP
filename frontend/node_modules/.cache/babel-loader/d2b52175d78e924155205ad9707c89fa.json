{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nconst client_1 = __importDefault(require(\"./parsers/client\"));\n\nconst device_1 = __importDefault(require(\"./parsers/device\"));\n\nconst operating_system_1 = __importDefault(require(\"./parsers/operating-system\"));\n\nconst vendor_fragment_1 = __importDefault(require(\"./parsers/vendor-fragment\"));\n\nconst browser_1 = __importDefault(require(\"./parsers/client/browser\"));\n\nconst BotParser = require(\"./parsers/bot\");\n\nconst user_agent_1 = require(\"./utils/user-agent\");\n\nconst version_compare_1 = require(\"./utils/version-compare\");\n\nclass DeviceDetector {\n  constructor(options) {\n    // Default options\n    this.options = {\n      skipBotDetection: false,\n      versionTruncation: 1\n    };\n\n    this.parse = userAgent => {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n\n      const result = {\n        client: this.clientParser.parse(userAgent),\n        os: this.operatingSystemParser.parse(userAgent),\n        device: this.deviceParser.parse(userAgent),\n        bot: this.options.skipBotDetection ? null : this.botParser.parse(userAgent)\n      };\n      const osName = (_a = result.os) === null || _a === void 0 ? void 0 : _a.name;\n      const osVersion = (_b = result.os) === null || _b === void 0 ? void 0 : _b.version;\n      const osFamily = operating_system_1.default.getOsFamily(osName || \"\");\n\n      if (!((_c = result.device) === null || _c === void 0 ? void 0 : _c.brand)) {\n        const brand = this.vendorFragmentParser.parse(userAgent);\n\n        if (brand) {\n          if (!result.device) {\n            result.device = this.createDeviceObject();\n          }\n\n          result.device.brand = brand;\n        }\n      }\n      /**\n       * Assume all devices running iOS / Mac OS are from Apple\n       */\n\n\n      if (!((_d = result.device) === null || _d === void 0 ? void 0 : _d.brand) && [\"Apple TV\", \"iOS\", \"Mac\"].includes(osName || \"\")) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n\n        result.device.brand = \"Apple\";\n      }\n      /**\n       * Chrome on Android passes the device type based on the keyword 'Mobile'\n       * If it is present the device should be a smartphone, otherwise it's a tablet\n       * See https://developer.chrome.com/multidevice/user-agent#chrome_for_android_user_agent\n       */\n\n\n      if (!((_e = result.device) === null || _e === void 0 ? void 0 : _e.type) && osFamily === \"Android\" && browser_1.default.getBrowserFamily(((_f = result.client) === null || _f === void 0 ? void 0 : _f.name) || \"\") === \"Chrome\") {\n        if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* Mobile\", userAgent)) {\n          if (!result.device) {\n            result.device = this.createDeviceObject();\n          }\n\n          result.device.type = \"smartphone\";\n        } else if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* (?!Mobile)\", userAgent)) {\n          if (!result.device) {\n            result.device = this.createDeviceObject();\n          }\n\n          result.device.type = \"tablet\";\n        }\n      }\n      /**\n       * Some user agents simply contain the fragment 'Android; Tablet;' or 'Opera Tablet', so we assume those devices are tablets\n       */\n\n\n      if (!((_g = result.device) === null || _g === void 0 ? void 0 : _g.type) && this.hasAndroidTabletFragment(userAgent) || user_agent_1.userAgentParser(\"Opera Tablet\", userAgent)) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n\n        result.device.type = \"tablet\";\n      }\n      /**\n       * Some user agents simply contain the fragment 'Android; Mobile;', so we assume those devices are smartphones\n       */\n\n\n      if (!((_h = result.device) === null || _h === void 0 ? void 0 : _h.type) && this.hasAndroidMobileFragment(userAgent)) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n\n        result.device.type = \"smartphone\";\n      }\n      /**\n       * Android up to 3.0 was designed for smartphones only. But as 3.0, which was tablet only, was published\n       * too late, there were a bunch of tablets running with 2.x\n       * With 4.0 the two trees were merged and it is for smartphones and tablets\n       *\n       * So were are expecting that all devices running Android < 2 are smartphones\n       * Devices running Android 3.X are tablets. Device type of Android 2.X and 4.X+ are unknown\n       */\n\n\n      if (!((_j = result.device) === null || _j === void 0 ? void 0 : _j.type) && osName === \"Android\" && osVersion !== \"\") {\n        if (version_compare_1.versionCompare(osVersion, \"2.0\") === -1) {\n          if (!result.device) {\n            result.device = this.createDeviceObject();\n          }\n\n          result.device.type = \"smartphone\";\n        } else if (version_compare_1.versionCompare(osVersion, \"3.0\") >= 0 && version_compare_1.versionCompare(osVersion, \"4.0\") === -1) {\n          if (!result.device) {\n            result.device = this.createDeviceObject();\n          }\n\n          result.device.type = \"tablet\";\n        }\n      }\n      /**\n       * All detected feature phones running android are more likely smartphones\n       */\n\n\n      if (((_k = result.device) === null || _k === void 0 ? void 0 : _k.type) === \"feature phone\" && osFamily === \"Android\") {\n        result.device.type = \"smartphone\";\n      }\n      /**\n       * According to http://msdn.microsoft.com/en-us/library/ie/hh920767(v=vs.85).aspx\n       * Internet Explorer 10 introduces the \"Touch\" UA string token. If this token is present at the end of the\n       * UA string, the computer has touch capability, and is running Windows 8 (or later).\n       * This UA string will be transmitted on a touch-enabled system running Windows 8 (RT)\n       *\n       * As most touch enabled devices are tablets and only a smaller part are desktops/notebooks we assume that\n       * all Windows 8 touch devices are tablets.\n       */\n\n\n      if (!((_l = result.device) === null || _l === void 0 ? void 0 : _l.type) && this.isToucheEnabled(userAgent) && (osName === \"Windows RT\" || osName === \"Windows\" && version_compare_1.versionCompare(osVersion, \"8.0\") >= 0)) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n\n        result.device.type = \"tablet\";\n      }\n      /**\n       * All devices running Opera TV Store are assumed to be televisions\n       */\n\n\n      if (user_agent_1.userAgentParser(\"Opera TV Store\", userAgent)) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n\n        result.device.type = \"television\";\n      }\n      /**\n       * Devices running Kylo or Espital TV Browsers are assumed to be televisions\n       */\n\n\n      if (!((_m = result.device) === null || _m === void 0 ? void 0 : _m.type) && [\"Kylo\", \"Espial TV Browser\"].includes(((_o = result.client) === null || _o === void 0 ? void 0 : _o.name) || \"\")) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n\n        result.device.type = \"television\";\n      } // set device type to desktop for all devices running a desktop os that were not detected as an other device type\n\n\n      if (!((_p = result.device) === null || _p === void 0 ? void 0 : _p.type) && this.isDesktop(result, osFamily)) {\n        if (!result.device) {\n          result.device = this.createDeviceObject();\n        }\n\n        result.device.type = \"desktop\";\n      }\n\n      return result;\n    };\n\n    this.hasAndroidMobileFragment = userAgent => {\n      return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Mobile;\", userAgent);\n    };\n\n    this.hasAndroidTabletFragment = userAgent => {\n      return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Tablet;\", userAgent);\n    };\n\n    this.isDesktop = (result, osFamily) => {\n      if (!result.os) {\n        return false;\n      } // Check for browsers available for mobile devices only\n\n\n      if (this.usesMobileBrowser(result.client)) {\n        return false;\n      }\n\n      return operating_system_1.default.getDesktopOsArray().includes(osFamily);\n    };\n\n    this.usesMobileBrowser = client => {\n      var _a, _b;\n\n      if (!client) return false;\n      return ((_a = client) === null || _a === void 0 ? void 0 : _a.type) === \"browser\" && browser_1.default.isMobileOnlyBrowser((_b = client) === null || _b === void 0 ? void 0 : _b.name);\n    };\n\n    this.isToucheEnabled = userAgent => {\n      return user_agent_1.userAgentParser(\"Touch\", userAgent);\n    };\n\n    this.createDeviceObject = () => ({\n      type: \"\",\n      brand: \"\",\n      model: \"\"\n    });\n\n    this.options = Object.assign(Object.assign({}, this.options), options);\n    this.clientParser = new client_1.default(this.options);\n    this.deviceParser = new device_1.default();\n    this.operatingSystemParser = new operating_system_1.default(this.options);\n    this.vendorFragmentParser = new vendor_fragment_1.default();\n    this.botParser = new BotParser();\n  }\n\n}\n\nmodule.exports = DeviceDetector;","map":{"version":3,"sources":["/home/command/evil-twin-rogue-ap/frontend/node_modules/device-detector-js/dist/index.js"],"names":["__importDefault","mod","__esModule","client_1","require","device_1","operating_system_1","vendor_fragment_1","browser_1","BotParser","user_agent_1","version_compare_1","DeviceDetector","constructor","options","skipBotDetection","versionTruncation","parse","userAgent","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","result","client","clientParser","os","operatingSystemParser","device","deviceParser","bot","botParser","osName","name","osVersion","version","osFamily","default","getOsFamily","brand","vendorFragmentParser","createDeviceObject","includes","type","getBrowserFamily","userAgentParser","hasAndroidTabletFragment","hasAndroidMobileFragment","versionCompare","isToucheEnabled","isDesktop","usesMobileBrowser","getDesktopOsArray","isMobileOnlyBrowser","model","Object","assign","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nconst client_1 = __importDefault(require(\"./parsers/client\"));\nconst device_1 = __importDefault(require(\"./parsers/device\"));\nconst operating_system_1 = __importDefault(require(\"./parsers/operating-system\"));\nconst vendor_fragment_1 = __importDefault(require(\"./parsers/vendor-fragment\"));\nconst browser_1 = __importDefault(require(\"./parsers/client/browser\"));\nconst BotParser = require(\"./parsers/bot\");\nconst user_agent_1 = require(\"./utils/user-agent\");\nconst version_compare_1 = require(\"./utils/version-compare\");\nclass DeviceDetector {\n    constructor(options) {\n        // Default options\n        this.options = {\n            skipBotDetection: false,\n            versionTruncation: 1\n        };\n        this.parse = (userAgent) => {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n            const result = {\n                client: this.clientParser.parse(userAgent),\n                os: this.operatingSystemParser.parse(userAgent),\n                device: this.deviceParser.parse(userAgent),\n                bot: this.options.skipBotDetection ? null : this.botParser.parse(userAgent)\n            };\n            const osName = (_a = result.os) === null || _a === void 0 ? void 0 : _a.name;\n            const osVersion = (_b = result.os) === null || _b === void 0 ? void 0 : _b.version;\n            const osFamily = operating_system_1.default.getOsFamily(osName || \"\");\n            if (!((_c = result.device) === null || _c === void 0 ? void 0 : _c.brand)) {\n                const brand = this.vendorFragmentParser.parse(userAgent);\n                if (brand) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.brand = brand;\n                }\n            }\n            /**\n             * Assume all devices running iOS / Mac OS are from Apple\n             */\n            if (!((_d = result.device) === null || _d === void 0 ? void 0 : _d.brand) && [\"Apple TV\", \"iOS\", \"Mac\"].includes(osName || \"\")) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.brand = \"Apple\";\n            }\n            /**\n             * Chrome on Android passes the device type based on the keyword 'Mobile'\n             * If it is present the device should be a smartphone, otherwise it's a tablet\n             * See https://developer.chrome.com/multidevice/user-agent#chrome_for_android_user_agent\n             */\n            if (!((_e = result.device) === null || _e === void 0 ? void 0 : _e.type) && osFamily === \"Android\" && browser_1.default.getBrowserFamily(((_f = result.client) === null || _f === void 0 ? void 0 : _f.name) || \"\") === \"Chrome\") {\n                if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* Mobile\", userAgent)) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"smartphone\";\n                }\n                else if (user_agent_1.userAgentParser(\"Chrome/[.0-9]* (?!Mobile)\", userAgent)) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"tablet\";\n                }\n            }\n            /**\n             * Some user agents simply contain the fragment 'Android; Tablet;' or 'Opera Tablet', so we assume those devices are tablets\n             */\n            if (!((_g = result.device) === null || _g === void 0 ? void 0 : _g.type) && this.hasAndroidTabletFragment(userAgent) || user_agent_1.userAgentParser(\"Opera Tablet\", userAgent)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"tablet\";\n            }\n            /**\n             * Some user agents simply contain the fragment 'Android; Mobile;', so we assume those devices are smartphones\n             */\n            if (!((_h = result.device) === null || _h === void 0 ? void 0 : _h.type) && this.hasAndroidMobileFragment(userAgent)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"smartphone\";\n            }\n            /**\n             * Android up to 3.0 was designed for smartphones only. But as 3.0, which was tablet only, was published\n             * too late, there were a bunch of tablets running with 2.x\n             * With 4.0 the two trees were merged and it is for smartphones and tablets\n             *\n             * So were are expecting that all devices running Android < 2 are smartphones\n             * Devices running Android 3.X are tablets. Device type of Android 2.X and 4.X+ are unknown\n             */\n            if (!((_j = result.device) === null || _j === void 0 ? void 0 : _j.type) && osName === \"Android\" && osVersion !== \"\") {\n                if (version_compare_1.versionCompare(osVersion, \"2.0\") === -1) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"smartphone\";\n                }\n                else if (version_compare_1.versionCompare(osVersion, \"3.0\") >= 0 && version_compare_1.versionCompare(osVersion, \"4.0\") === -1) {\n                    if (!result.device) {\n                        result.device = this.createDeviceObject();\n                    }\n                    result.device.type = \"tablet\";\n                }\n            }\n            /**\n             * All detected feature phones running android are more likely smartphones\n             */\n            if (((_k = result.device) === null || _k === void 0 ? void 0 : _k.type) === \"feature phone\" && osFamily === \"Android\") {\n                result.device.type = \"smartphone\";\n            }\n            /**\n             * According to http://msdn.microsoft.com/en-us/library/ie/hh920767(v=vs.85).aspx\n             * Internet Explorer 10 introduces the \"Touch\" UA string token. If this token is present at the end of the\n             * UA string, the computer has touch capability, and is running Windows 8 (or later).\n             * This UA string will be transmitted on a touch-enabled system running Windows 8 (RT)\n             *\n             * As most touch enabled devices are tablets and only a smaller part are desktops/notebooks we assume that\n             * all Windows 8 touch devices are tablets.\n             */\n            if (!((_l = result.device) === null || _l === void 0 ? void 0 : _l.type)\n                && this.isToucheEnabled(userAgent)\n                && (osName === \"Windows RT\"\n                    || (osName === \"Windows\"\n                        && version_compare_1.versionCompare(osVersion, \"8.0\") >= 0))) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"tablet\";\n            }\n            /**\n             * All devices running Opera TV Store are assumed to be televisions\n             */\n            if (user_agent_1.userAgentParser(\"Opera TV Store\", userAgent)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"television\";\n            }\n            /**\n             * Devices running Kylo or Espital TV Browsers are assumed to be televisions\n             */\n            if (!((_m = result.device) === null || _m === void 0 ? void 0 : _m.type) && [\"Kylo\", \"Espial TV Browser\"].includes(((_o = result.client) === null || _o === void 0 ? void 0 : _o.name) || \"\")) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"television\";\n            }\n            // set device type to desktop for all devices running a desktop os that were not detected as an other device type\n            if (!((_p = result.device) === null || _p === void 0 ? void 0 : _p.type) && this.isDesktop(result, osFamily)) {\n                if (!result.device) {\n                    result.device = this.createDeviceObject();\n                }\n                result.device.type = \"desktop\";\n            }\n            return result;\n        };\n        this.hasAndroidMobileFragment = (userAgent) => {\n            return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Mobile;\", userAgent);\n        };\n        this.hasAndroidTabletFragment = (userAgent) => {\n            return user_agent_1.userAgentParser(\"Android( [\\.0-9]+)?; Tablet;\", userAgent);\n        };\n        this.isDesktop = (result, osFamily) => {\n            if (!result.os) {\n                return false;\n            }\n            // Check for browsers available for mobile devices only\n            if (this.usesMobileBrowser(result.client)) {\n                return false;\n            }\n            return operating_system_1.default.getDesktopOsArray().includes(osFamily);\n        };\n        this.usesMobileBrowser = (client) => {\n            var _a, _b;\n            if (!client)\n                return false;\n            return ((_a = client) === null || _a === void 0 ? void 0 : _a.type) === \"browser\" && browser_1.default.isMobileOnlyBrowser((_b = client) === null || _b === void 0 ? void 0 : _b.name);\n        };\n        this.isToucheEnabled = (userAgent) => {\n            return user_agent_1.userAgentParser(\"Touch\", userAgent);\n        };\n        this.createDeviceObject = () => ({\n            type: \"\",\n            brand: \"\",\n            model: \"\"\n        });\n        this.options = Object.assign(Object.assign({}, this.options), options);\n        this.clientParser = new client_1.default(this.options);\n        this.deviceParser = new device_1.default();\n        this.operatingSystemParser = new operating_system_1.default(this.options);\n        this.vendorFragmentParser = new vendor_fragment_1.default();\n        this.botParser = new BotParser();\n    }\n}\nmodule.exports = DeviceDetector;\n"]},"metadata":{},"sourceType":"script"}